use data ByteArray
use heap Heap

digitToNat : Char -> Nat
digitToNat ch = Char.toNat ch - Char.toNat ?0

unique type Direction = Up | Down | Left | Right

rotateLeft : Direction -> Direction
rotateLeft dir = match dir with
  Up -> Left
  Down -> Right
  Left -> Down
  Right -> Up

rotateRight : Direction -> Direction
rotateRight dir = match dir with
  Up -> Right
  Down -> Left
  Left -> Up
  Right -> Down

solve : Nat -> ByteArray -> Nat
solve rows grid =
  use Nat < >
  cols = size grid / rows

  cmpCandidates a b =
    (lossA, _, _, _) = a
    (lossB, _, _, _) = b
    if lossA < lossB then Less else if lossA > lossB then Greater else Equal

  displace : (Nat, Nat) -> Direction -> Optional (Nat, Nat)
  displace p dir =
    (x, y) = p
    match dir with
      Up | y > 0 -> Some (x, y - 1)
      Down | y < (rows - 1) -> Some (x, y + 1)
      Left | x > 0 -> Some (x - 1, y)
      Right | x < (cols - 1) -> Some (x + 1, y)
      _ -> None

  go : Set ((Nat, Nat), Direction, Nat) -> Heap (Nat, (Nat, Nat), Direction, Nat) -> Nat
  go visited queue = match Heap.pop cmpCandidates queue with
    Some ((loss, p@(x, y), dir, straights), queue')
      | Set.contains (p, dir, straights) visited -> go visited queue'
      | x == (cols - 1) && (y == (rows - 1))
        -- -> loss -- Part 1
        && (straights >= 4) -> loss -- Part 2
      | true ->
        d = (dir, straights + 1)
        ds = [(rotateLeft dir, 1), (rotateRight dir, 1)]
        directions =
          -- if straights < 3 then d +: ds else ds -- Part 1
          -- Part 2
          if straights < 4 then [d]
          else if straights < 10 then d +: ds
          else ds
        neighbors = directions |> List.filterMap cases
          (d, straights') -> match displace p d with
            Some q@(x, y) | not (Set.contains (q, d, straights') visited) ->
              weight = ByteArray.read8 grid (rows * y + x)
              Some (loss + weight, q, d, straights')
            _ -> None
        queue'' = List.foldLeft (flip (heap.Heap.insert cmpCandidates)) queue' neighbors
        visited' = Set.insert (p, dir, straights) visited
        go visited' queue''
    _ -> maxNat

  go empty (Heap.fromList cmpCandidates [(0, (0, 0), Down, 0), (0, (0, 0), Right, 0)])

main : '{IO, Exception} ()
main _ =
  input = readFileUtf8 (FilePath "input") |> trim |> lines
  rows = size input
  grid = List.flatMap (List.map digitToNat << toCharList) input |> ByteArray.fromList
  printLine (solve rows grid |> Nat.toText)
